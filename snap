#!/bin/ksh

version=1.0.10

grey="\033[01;30m"
red="\033[01;31m"
green="\033[01;32m"
yellow="\033[01;33m"
blue="\033[01;34m"
magenta="\033[01;35m"
cyan="\033[01;35m"
bold="\033[01;39m"

white="\033[0m"

set -A sets 'comp' 'game' 'man' 'base'
set -A xsets 'xbase' 'xfont' 'xserv' 'xshare'
base_sig='SHA256.sig'

spath=$(dirname -- "$(command -v -- "$0")")
sname="${0##*/}"

function usage {
    cat <<EOF

snap options:

  -s force snap to use snapshots.
  -S do not check signatures.
  -c specify location of config file (default is ~/.snaprc)
  -e just extract sets in DST.
  -m <machine> use <machine> instead of what 'machine' returns.
  -v <version> used to force snap to use <version> (examples: snapshots or 5.3).
  -V <setversion> used to force snap to use <setversion> for sets (example: -V 5.3). Note: this will only append 53 to sets, ie base53.tgz.
  -r run sysmerge after extracting {x}sets.
  -x do not extract x11 sets.
  -M specify a mirror to use (example: " -M ftp3.usa.openbsd.org")
  -i interactive with colors.
  -n force using bsd.mp as bsd.
  -k only install kernels and exit.
  -B do not backup current kernel.
  -u check for update to snap script.
  -U download new snap script (will replace currently installed version).
  -b device to install bootstrap to.
  -R reboot after installation.
  -h help.

  Examples:
    To update to the latest snapshot using the fastest mirror for your
    region:

      snap -s -M ftp3.usa.openbsd.org

    To update to the latest version of 5.3 without updating xsets:

      snap -v 5.3 -V 5.3 -x -M ftp3.usa.openbsd.org

  Example ~/.snaprc
    INTERACTIVE:true
    DST:/tmp/upgrade
    MERGE:true
    MIRROR:ftp3.usa.openbsd.org
    NO_X11:true
    FTP_OPTS:-C -V

EOF
    exit 0
}

function get_conf_var {
    RET=''
    if [ -e $CONF_FILE ]; then
	RET=$( grep $1 $CONF_FILE | awk -F : '{print $2}' )
    fi

    if [ "${RET}X" == "X" ]; then
	return 1
    else
	echo $RET
    fi
}

function msg {
    if [ $INTERACTIVE == true ]; then
	echo "${green}${1}${white}"
    fi
}

function error {
    if [[ $INTERACTIVE == true ]]; then
	>&2 echo "${red}${1}${white}"
    else
	>&2 echo "${sname}: $1"
    fi

    if [[ $2 == true ]]; then
	rollback
    fi

    exit 1
}

function check_update {
    R="https://api.github.com/repos/qbit/snap/releases/latest"
    LATEST=$(/usr/bin/ftp -o - $R | \
		    awk -F , '{for(i=1;i<NF;i++){if(match($i, /tag_name/)){print $i}}}' | \
		    cut -d: -f 2 | \
		    tr -d \")
    rversion=$(echo $LATEST | tr -d \.)
    lversion=$(echo $version | tr -d \.)
    if [ $rversion -gt $lversion ]; then
	msg "${white}Update ${green}${LATEST}${white} available for ${bold}snap${white}!"

	if [ $INS_UPDATE == true ]; then
	    msg "installing update.."
	    install_update $LATEST
	fi
    else
	msg "snap-${version} ${white}is up to date!"
    fi
}

function install_update {
    sver=$1
    tmp_file=$(mktemp)
    /usr/bin/ftp $FTP_OPTS -o $tmp_file \
		 https://raw.githubusercontent.com/qbit/snap/${sver}/snap
    cp $tmp_file "$spath/$sname"
    msg "Installed new version (${sver}) of snap - please re-run!"
    exit 0
}

function backup {
    FAIL=0
    cp /bsd /obsd || FAIL=1
    cp /bsd.rd /obsd.rd || FAIL=1
    cp /sbin/reboot /sbin/oreboot || FAIL=1

    if [ $FAIL == 1 ]; then
	error "Failed to backup"
    else
	msg "Backed up the following:
    ${bold}/bsd => /obsd
    /bsd.rd => /obsd.rd
    /sbin/reboot => /sbin/oreboot${green}"
  fi
}

function rollback {
    FAIL=0
    cp /obsd /bsd || FAIL=1
    cp /obsd.rd /bsd.rd || FAIL=1
    cp /sbin/oreboot /sbin/reboot || FAIL=1

    if [ $FAIL == 1 ]; then
	error "Failed to rollback"
    else
	msg "Restored the old files for the following:
    ${bold}/bsd => /obsd
    /bsd.rd => /obsd.rd
    /sbin/reboot => /sbin/oreboot${green}"
  fi

}

function verisigs {
    KEY=/etc/signify/openbsd-${SETVER}-base.pub
    VALID=true

    for i in $@; do
	signify -V -e -p ${KEY} -x SHA256.sig -m - | sha256 -C - ${i} \
	    || VALID=false
    done

    if [ $VALID == false ]; then
	error "Invalid signature found! They are after you!" true
    fi
}

function update_kernel {
    FAIL=0
    if [ $SKIP_SIGN == false ]; then
	verisigs "bsd*"
    fi
    cp ${KERNEL} /bsd || FAIL=1
    cp ${RD} /bsd.rd || FAIL=1
    if [ $FAIL == 1 ]; then
	error "Failed to copy new kernel"
    else
	msg "Set primary kernel to ${KERNEL}:
    ${KERNEL} => /bsd"
  fi
}

function fetch {
    DF=$(echo $1 | awk -F/ '{print $NF}')
    TDF="${DF}.out"
    R=0

    # this check may cause signature issues.. if old files exist in
    # the DEST directory.
    if [ ! -e $DF ]; then
	/usr/bin/ftp $FTP_OPTS -o $TDF $1
	R=$?

	# move the tmp file to actual file name so we can use -C
	mv $TDF $DF
    fi

    return $R
}

function extract {
    ftp -D Extracting -Vmo - file://${1} | tar -C / -xzphf - \
	|| error "Failed to extract ${1}"
}

CONF_FILE=~/.snaprc
SKIP_SIGN=false
CPUS=$(sysctl -n hw.ncpufound)
INTERACTIVE=$(get_conf_var 'INTERACTIVE' || echo 'false')
DST=$(get_conf_var 'DST' || echo '/tmp/upgrade')
EXTRACT_ONLY=false
KERNEL_ONLY=false
FTP_OPTS=$(get_conf_var 'FTP_OPTS' || echo " -V ")
MACHINE=$(machine)
MERGE=$(get_conf_var 'MERGE' || echo 'false')
NO_X11=$(get_conf_var 'NO_X11' || echo 'false')
SETVER=$(uname -r | tr -d \.)
VER=$(uname -r)
CHK_UPDATE=$(get_conf_var 'CHK_UPDATE' || echo 'false')
INS_UPDATE=$(get_conf_var 'INS_UPDATE' || echo 'false')
INSTBOOT=$(get_conf_var 'INSTBOOT')
REBOOT=$(get_conf_var 'REBOOT' || echo 'false')

MIRROR=$(get_conf_var 'MIRROR' || echo 'ftp3.usa.openbsd.org')

while getopts "sSfesm:sv:srV:spxRsAM:shiBknuUb" arg; do
    case $arg in
	s)
	    VER='snapshots'
	    ;;
	c)
	    CONF_FILE=$OPTARG
	    ;;
	S)
	    SKIP_SIGN=true
	    ;;
	e)
	    EXTRACT_ONLY=true
	    ;;
	m)
	    MACHINE=$OPTARG
	    ;;
	v)
	    VER=$OPTARG
	    ;;
	V)
	    SETVER=$(echo $OPTARG | tr -d \.)
	    ;;
	x)
	    NO_X11=true
	    ;;
	r)
	    MERGE=true
	    ;;
	M)
	    MIRROR=$OPTARG
	    ;;
	h)
	    usage
	    ;;
	i)
	    INTERACTIVE=true
	    ;;
	B)
	    NO_KBACKUPS=true
	    ;;
	k)
	    KERNEL_ONLY=true
	    ;;
	n)
	    FORCE_MP=true
	    ;;
	u)
	    CHK_UPDATE=true
	    ;;
	U)
	    CHK_UPDATE=true
	    INS_UPDATE=true
	    ;;
	b)
	    INSTBOOT=$(echo $OPTARG)
	    ;;
	R)
	    REBOOT=true
	    ;;
	*)
	    exit 1
    esac
done

if [ $CHK_UPDATE == true ]; then
    check_update
    exit 0
fi

[[ $(id -u) -ne 0 ]] && error "need root privileges"

if [ -e ~/.last_snap ]; then
    msg "last snap run: ${white}$(cat ~/.last_snap)"
fi

kern_ver=$(sysctl kern.version | grep -oE "\-(current|beta)")
if [ $? == 0 ]; then
    msg "kern.version: ${white}reporting as $kern_ver"
    VER='snapshots'
fi

mkdir -p -- "$DST" || exit 1

URL="http://${MIRROR}/pub/OpenBSD/${VER}/${MACHINE}"

msg "${white}Fetching from: ${green}${URL}"

(
    cd -- "$DST" || exit 1

    # first element should be bsd, second should be mp for given kernel names.
    if [ "${MACHINE}" == "armv7" ]; then
	TYPE=$(uname -v | awk -F - '{print $NF}' | cut -d# -f1)
	# Currently there is no bsd.mp
	#set -A bsds "bsd.${TYPE}" "bsd.mp.${TYPE}" "bsd.rd.${TYPE}" "bsd.${TYPE}.umg"
	if [ -e /bsd.${TYPE} ]; then
	    set -A bsds "bsd.${TYPE}" "" "bsd.rd.${TYPE}" "bsd.${TYPE}.umg"
	else
	    set -A bsds 'bsd' '' 'bsd.rd' 'bsd.umg'
	fi
    else
	set -A bsds 'bsd' 'bsd.mp' 'bsd.rd'
    fi

    RD=${bsds[2]}

    if [ $SKIP_SIGN == false ]; then
	fetch "${URL}/${base_sig}" || error "Can't fetch signature file!"
    fi

    #TODO mount msdos volume and copy umg files.

    if [ $EXTRACT_ONLY == false ]; then
	msg "Fetching bsds"
	for bsd in ${bsds[@]}; do
	    fetch "${URL}/${bsd}" || error "Can't find bsds at ${URL}"
	done

	if [ "${CPUS}" == "1" ] && [ -z $FORCE_MP ]; then
	    msg "${white}Using ${green}bsd.."
	    KERNEL=${bsds[0]}
	else
	    msg "${white}Using ${green}bsd.mp.."
	    KERNEL=${bsds[1]}
	fi

	if [ -z $NO_KBACKUPS ]; then
	    backup
	fi

	update_kernel

	if [ $KERNEL_ONLY == true ]; then
	    exit 0
	fi

	msg "Fetching sets"
	for set in ${sets[@]}; do
	    fetch "${URL}/${set}${SETVER}.tgz" || error "Perhaps you need to specify -V to set version. Example 5.2" true
	done

	if [ "${NO_X11}" == "false" ]; then
	    msg "Fetching xsets"
	    for set in ${xsets[@]}; do
		fetch "${URL}/${set}${SETVER}.tgz" || error "Perhaps you need to specify -V to set version. Example -V 5.2" true
	    done
	fi
    fi

    if [ $SKIP_SIGN == false ]; then
	verisigs "*.tgz"
    fi

    msg "Extracting sets"
    for set in ${sets[@]}; do
	extract ${DST}/${set}${SETVER}.tgz

	if [ "${set}" == "man" ] && [ "${NO_X11}" == "false" ]; then
	    msg "Extracting xsets ${white} will continue with sets after. ${green}"

	    for xset in ${xsets[@]}; do
		extract ${DST}/${xset}${SETVER}.tgz
	    done
	fi
    done

    if [ $MERGE ]; then
	sysmerge ${MERG_OPT} || error "Failed to sysmerge!"
    else
	echo "Don't forget to run:\n\tsysmerge -s ${DST}/etc${SETVER}.tgz -x ${DST}/xetc${SETVER}.tgz"
    fi

    if [ $INSTBOOT ]; then
	msg "Installing bootstrap on ${INSTBOOT}"
	installboot -v $INSTBOOT || error "Something bad happened - check your boot disk!"
    fi

    date > ~/.last_snap

    if [ $REBOOT == true ]; then
	msg "Rebooting"
	/sbin/oreboot || error "Something really bad happened - Can't reboot!"
    fi
)
